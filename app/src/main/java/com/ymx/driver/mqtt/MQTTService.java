package com.ymx.driver.mqtt;import android.app.Activity;import android.app.Service;import android.content.Context;import android.content.Intent;import android.os.Build;import android.os.IBinder;import android.text.TextUtils;import android.util.Base64;import android.util.Log;import androidx.annotation.Nullable;import com.dgrlucky.log.LogX;import com.google.gson.Gson;import com.umeng.commonsdk.debug.E;import com.ymx.driver.BuildConfig;import com.ymx.driver.R;import com.ymx.driver.base.AppManager;import com.ymx.driver.base.YmxApp;import com.ymx.driver.base.YmxCache;import com.ymx.driver.config.MessageEvent;import com.ymx.driver.config.MqttConfig;import com.ymx.driver.entity.BaseGrabOrderEntity;import com.ymx.driver.entity.BaseMqttEntity;import com.ymx.driver.entity.MqttInfoEntity;import com.ymx.driver.entity.app.CancelOrderEntity;import com.ymx.driver.entity.app.CharterCancalOrder;import com.ymx.driver.entity.app.CharterOrderDetailsEntity;import com.ymx.driver.entity.app.DriverLockEntity;import com.ymx.driver.entity.app.GrabNewOrderEntity;import com.ymx.driver.entity.app.LongDrivingPaySuccessEntigy;import com.ymx.driver.entity.app.LongRangCustomerPremiumStatus;import com.ymx.driver.entity.app.OrderCirculationEntity;import com.ymx.driver.entity.app.OrderCirculationInfo;import com.ymx.driver.entity.app.OrderCirculationNoticeEntity;import com.ymx.driver.entity.app.OrderPriceEntity;import com.ymx.driver.entity.app.TransferOrderCancalEntity;import com.ymx.driver.entity.app.TransferOrderUpdateTime;import com.ymx.driver.entity.app.UpdateOrderEntity;import com.ymx.driver.entity.app.UpdateStartAddressEntity;import com.ymx.driver.entity.app.UserEntity;import com.ymx.driver.entity.app.mqtt.LongDriverSysTemCancalOrder;import com.ymx.driver.entity.app.mqtt.PassengerInfoEntity;import com.ymx.driver.entity.app.mqtt.PhoneOrderSuccessEntity;import com.ymx.driver.http.RetrofitFactory;import com.ymx.driver.http.TFunc;import com.ymx.driver.http.TObserver;import com.ymx.driver.mqtt.inters.MqttConfigFactory;import com.ymx.driver.mqtt.inters.SendMessage;import com.ymx.driver.tts.BaiduSpeech;import com.ymx.driver.ui.login.LoginHelper;import com.ymx.driver.ui.longrange.driving.ExtensionTheTimeDailogActivity;import com.ymx.driver.ui.longrange.driving.OrderCirculationDialogActivity;import com.ymx.driver.ui.main.activity.MainActivity;import com.ymx.driver.util.DateUtils;import com.ymx.driver.util.DeviceUtil;import com.ymx.driver.util.LogUtil;import com.ymx.driver.util.MyLifecycleHandler;import com.ymx.driver.util.NewOrderFilterUtiles;import com.ymx.driver.util.NewOrderTTSController;import com.ymx.driver.util.NotificationUtil;import com.ymx.driver.util.UIUtils;import com.ymx.driver.util.VoicePlayMannager;import org.eclipse.paho.android.service.MqttAndroidClient;import org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions;import org.eclipse.paho.client.mqttv3.IMqttActionListener;import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;import org.eclipse.paho.client.mqttv3.IMqttToken;import org.eclipse.paho.client.mqttv3.MqttCallbackExtended;import org.eclipse.paho.client.mqttv3.MqttConnectOptions;import org.eclipse.paho.client.mqttv3.MqttMessage;import org.eclipse.paho.client.mqttv3.persist.MqttDefaultFilePersistence;import org.greenrobot.eventbus.EventBus;import java.io.File;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.schedulers.Schedulers;/** * Created by wuwei * 2018/9/14 * 佛祖保佑       永无BUG */public class MQTTService extends Service {    public static final String Action = "start_serivce";    public static final String initService = "init_serivce";    private static final String TAG = "MQTTService";    private static MqttAndroidClient mClient;    private static final int HEART_BEAT_INTERVAL = 60;    private static final int CONNECT_TIME_OUT_INTERVAL = 80;    private static int qos = 1;    private String mClientId;    private String url;    private static List<String> mTopics = new ArrayList<>();    public static void start(Context context, String actionService) {        Intent intent = new Intent();        start(context, intent, actionService);    }    public static void start(Context context, Intent extras, String actionService) {        try {            if (LoginHelper.isLogin()) {                Intent intent = new Intent(context, MQTTService.class);                if (extras != null) {                    intent.putExtras(extras);                }                if (!TextUtils.isEmpty(actionService)) {                    intent.setAction(actionService);                }                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                    context.startForegroundService(intent);                } else {                    context.startService(intent);                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static void stop(Context context) {        Intent intent = new Intent(context, MQTTService.class);        context.stopService(intent);    }    @Nullable    @Override    public IBinder onBind(Intent intent) {        return null;    }    @Override    public int onStartCommand(Intent intent, int flags, int startId) {//        if (!mTopics.contains(MqttConfig.MQTT_TOPIC_GPS_UPLOAD)) {//            mTopics.add(MqttConfig.MQTT_TOPIC_GPS_UPLOAD);//        }        startForeground(112, NotificationUtil.buildNotification(this, NotificationUtil.CHANNELID                , NotificationUtil.CHANNELNAME));        if (intent != null && intent.getAction().equals(Action)) {        } else {            if (!mTopics.contains(MqttConfig.MQTT_TOPIC_USER_EVENT + YmxCache.getUserAccount())) {                mTopics.add(MqttConfig.MQTT_TOPIC_USER_EVENT + YmxCache.getUserAccount());            }            if (YmxCache.getTranferCarState() == 1 || YmxCache.getTranferCarState() == 2) {                List<String> sideIdList = YmxCache.getDriverSideIdList();                if (sideIdList != null && !sideIdList.isEmpty()) {                    for (String id : sideIdList) {                        if (!mTopics.contains(MqttConfig.MQTT_TOPIC_SIDE_ID_LIST + id)) {                            mTopics.add(MqttConfig.MQTT_TOPIC_SIDE_ID_LIST + id);                        }                    }                }            }//            } catch (Exception e) {////            }            connect(getApplicationContext());        }        return START_STICKY;    }    @Override    public void onDestroy() {        super.onDestroy();        disconnect();        mTopics.clear();    }    private MqttConnectOptions createOfficialOptions() {        MqttConnectOptions connectOptions = new MqttConnectOptions();        connectOptions.setKeepAliveInterval(HEART_BEAT_INTERVAL);        connectOptions.setConnectionTimeout(CONNECT_TIME_OUT_INTERVAL);        connectOptions.setCleanSession(true);        connectOptions.setAutomaticReconnect(true);        String uid = YmxCache.getUserAccount();        String token = YmxCache.getUserToken();        if (BuildConfig.DEBUG) {            connectOptions.setUserName("d_" + uid);            connectOptions.setPassword(token.toCharArray());        } else {            connectOptions.setUserName("d_" + uid);            connectOptions.setPassword(token == null ? "".toCharArray() : token.toCharArray());        }        return connectOptions;    }    public synchronized void connect(Context context) {        if (isConnecting()) {            return;        }        try {            initClient(context);            doConnect();        } catch (Exception e) {            LogUtil.i(TAG, "mqtt connect error");        }    }    public static synchronized void disconnect() {        for (int i = 0; i < mTopics.size(); i++) {            unSubscribeCodinMessageChannel(mTopics.get(i));        }        if (isConnecting()) {            try {                LogUtil.i(TAG, "关闭mClient");                mClient.disconnect();                mClient = null;            } catch (Exception e) {                LogUtil.i(TAG, "关闭mClient" + e.getMessage());            }        } else {            LogUtil.i(TAG, "mqtt 已是断开状态");        }    }    public static boolean isConnecting() {        if (mClient != null) {            try {                boolean result = mClient.isConnected();                return result;            } catch (Exception e) {                e.printStackTrace();                return false;            }        } else {            return false;        }    }    private void initClient(Context context) {        if (BuildConfig.DEBUG) {            url = MqttConfig.MQTT_DEBUG_URL;        } else {            url = MqttConfig.MQTT_RELEASE_URL;        }        if (LoginHelper.isLogin()) {            LogUtil.d(TAG, DateUtils.getNowTimeStamp());            mClientId = "app_" + YmxCache.getUserAccount() + "_" + DateUtils.getNowTimeStamp();        } else {            mClientId = "app_" + DeviceUtil.getUniqueId(context) + "_" + DateUtils.getNowTimeStamp();        }        LogUtil.i(TAG, "测试设备Id  initClient: ----" + mClientId);        if (mClient == null) {            String path = UIUtils.getContext().getFilesDir().getAbsolutePath() + File.separator + "mqttdirs";            MqttDefaultFilePersistence mqttDefaultFilePersistence = new MqttDefaultFilePersistence(path);            mClient = new MqttAndroidClient(context, url, mClientId, mqttDefaultFilePersistence);        }        mClient.setCallback(new MqttCallbackExtended() {            @Override            public void connectComplete(boolean reconnect, String serverURI) {                if (BuildConfig.DEBUG) {                    UIUtils.saveFile(DateUtils.timeStamp2Date(String.valueOf(System.currentTimeMillis() / 1000), "") + "：" + "connectComplete() isReconnect : " + reconnect, "mqtt.txt", true);                }                LogUtil.i(TAG, "connectComplete() isReconnect : " + reconnect);                for (int i = 0; i < mTopics.size(); i++) {                    unSubscribeCodinMessageChannel(mTopics.get(i));                }                for (int i = 0; i < mTopics.size(); i++) {                    subscribeCodinMessageChannel(mTopics.get(i));                }            }            @Override            public void connectionLost(Throwable cause) {                LogUtil.i(TAG, "connectionLost()-11--" + isConnecting());            }            @Override            public void messageArrived(String topic, MqttMessage message) throws Exception {                byte[] payload = message.getPayload();                byte[] data = Base64.decode(payload, Base64.NO_WRAP);                LogUtil.i(TAG, "messageArrived--" + topic + "  " + new String(data));                Gson gson = new Gson();                BaseMqttEntity baseMqttEntity = gson.fromJson(new String(data), BaseMqttEntity.class);                LogX.json(new String(data));                //先发送一个返回主页的消息                if (TextUtils.equals(MqttConfig.MQTT_CODE_PASSENGER_ORDER,                        baseMqttEntity.getCode()) || TextUtils.equals(MqttConfig.MQTT_CODE_PASSENGER_CANCEL_ORDER,                        baseMqttEntity.getCode()) || TextUtils.equals(MqttConfig.MQTT_CODE_LONG_DRIVIER_NEW_ORDER, baseMqttEntity.getCode())                        || TextUtils.equals(MqttConfig.MQTT_CODE_CHARTTER_NEW_ORDER_TYPE, baseMqttEntity.getCode()) || TextUtils.equals(MqttConfig.MQTT_CODE_TRANSFER_ORDER_SUCCESS, baseMqttEntity.getCode())                ) {                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_TO_MAIN));                }                if (TextUtils.equals(MqttConfig.MQTT_CODE_PASSENGER_ORDER,                        baseMqttEntity.getCode())) {//乘客下单，通知到司机                    BaseMqttEntity<PassengerInfoEntity> passerInfoEntity = BaseMqttEntity.fromJson(new String(data), PassengerInfoEntity.class);                    if (!NewOrderFilterUtiles.hasOrder(passerInfoEntity.getData().getOrderNo())) {                        return;                    }                    rideHailingDrivingOrder(passerInfoEntity.getData().getOrderNo(), MqttConfig.MQTT_CODE_PASSENGER_ORDER, passerInfoEntity.getData());                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_PASSENGER_CANCEL_ORDER,                        baseMqttEntity.getCode())) {//乘客取消订单，通知到司机                    BaseMqttEntity<CancelOrderEntity> canOrderEntity = BaseMqttEntity.fromJson(new String(data), CancelOrderEntity.class);                    Intent intent = new Intent();                    MainActivity.start(YmxApp.getInstance(), intent);                    if (!TextUtils.isEmpty(YmxCache.getOrderId())) {                        if (YmxCache.getOrderId().equals(canOrderEntity.getData().getOrderNo())) {                            {                                YmxCache.setOrderId("");                            }                        }                    }                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_PASSENGER_CANCEL_ORDER, canOrderEntity.getData()));                    VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.passenger_cancel_order);                    if (canOrderEntity.getData().isIntegralCompensate()) {                        VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.driver_jifen);                    }                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_PASSENGER_GOOD_FRIEND_ORDER, baseMqttEntity.getCode())) {                    BaseMqttEntity<PassengerInfoEntity> passerInfoEntity = BaseMqttEntity.fromJson(new String(data), PassengerInfoEntity.class);                    if (MyLifecycleHandler.isApplicationInForeground()) {                        Activity activity = AppManager.getAppManager().currentActivity();                        if (activity instanceof MainActivity) {                            Intent intent = new Intent();                            MainActivity.start(YmxApp.getInstance(), intent);                        }                    }                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_PASSENGER_GOOD_FRIEND_ORDER, passerInfoEntity.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_PHONE_ORDER_PAY_SUCCESS, baseMqttEntity.getCode())) {                    BaseMqttEntity<PhoneOrderSuccessEntity> phoneOrderSuccessEntity = BaseMqttEntity.fromJson(new String(data), PhoneOrderSuccessEntity.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_PHONE_ORDER_PAY_SUCCESS, phoneOrderSuccessEntity.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_EXTENSION_TIME, baseMqttEntity.getCode())) {                    if (MyLifecycleHandler.isApplicationInForeground()) {                        Intent intent = new Intent();                        MainActivity.start(YmxApp.getInstance(), intent);                    }                    ExtensionTheTimeDailogActivity.start(YmxApp.getInstance());                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_TIME_EXPIRED, baseMqttEntity.getCode())) {                    BaseMqttEntity<String> info = BaseMqttEntity.fromJson(new String(data), String.class);                    if (MyLifecycleHandler.isApplicationInForeground()) {                        Intent intent = new Intent();                        MainActivity.start(YmxApp.getInstance(), intent);                    }                    UIUtils.showToast(info.getData());                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_UPDATE_DRIVER_TYPE, baseMqttEntity.getCode())) {                    BaseMqttEntity<MqttInfoEntity> info = BaseMqttEntity.fromJson(new String(data), MqttInfoEntity.class);                    YmxCache.setDriverType(info.getData().getDriverType());                    UIUtils.showToast(info.getData().getTips());                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_LONG_DRIVIER_NEW_ORDER, baseMqttEntity.getCode())) {                    BaseMqttEntity<PassengerInfoEntity> passerInfoEntity = BaseMqttEntity.fromJson(new String(data), PassengerInfoEntity.class);                    if (!NewOrderFilterUtiles.hasOrder((passerInfoEntity.getData().getOrderNo()))) {                        return;                    }                    if (!MyLifecycleHandler.isApplicationInForeground()) {                        Intent intent = new Intent();                        MainActivity.start(YmxApp.getInstance(), intent);                    }                    YmxCache.setOrderId(passerInfoEntity.getData().getOrderNo());                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_RANGGE_DRIVING_NEW_ORDER, passerInfoEntity.getData()));                    VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.long_driving_auto_receive_order);                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_LONG_DRIVIER_PAY_SUCCESS, baseMqttEntity.getCode())) {                    BaseMqttEntity<LongDrivingPaySuccessEntigy> paySuccesEntity = BaseMqttEntity.fromJson(new String(data), LongDrivingPaySuccessEntigy.class);                    LongDrivingPaySuccessEntigy longDrivingPaySuccessEntigy = paySuccesEntity.getData();                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_QUERY_LONG_DRIVIER_PAY_SUCCESS, longDrivingPaySuccessEntigy));                    if (longDrivingPaySuccessEntigy.getPayMode() == 1) {                        VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.zfb_pay_success);                    } else if (longDrivingPaySuccessEntigy.getPayMode() == 2) {                        VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.weixin_pay_success);                    }                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_LONG_DRIVIER_SYSTEM_CANCAL_ORDER, baseMqttEntity.getCode())) {                    BaseMqttEntity<LongDriverSysTemCancalOrder> sysCancalOrder = BaseMqttEntity.fromJson(new String(data), LongDriverSysTemCancalOrder.class);                    if (sysCancalOrder.getData().isIntegralCompensate()) {                        VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.driver_jifen);                    }                    if (sysCancalOrder != null && sysCancalOrder.getData() != null && sysCancalOrder.getData().getDriverState() == 8) {                        YmxCache.setOrderId("");                    }                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_QUERY_LONG_DRIVIER_SYSTEM_CALCAL_ORDER, sysCancalOrder.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_UPDATE_ORDER_INFO_TYPE, baseMqttEntity.getCode())) {                    BaseMqttEntity<UpdateOrderEntity> updateOrder = BaseMqttEntity.fromJson(new String(data), UpdateOrderEntity.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_UPDATE_ORDER_INFO, updateOrder.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_ORDER_PRICE, baseMqttEntity.getCode())) {                    BaseMqttEntity<OrderPriceEntity> updateOrderPrice = BaseMqttEntity.fromJson(new String(data), OrderPriceEntity.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_CODE_UPDATE_ORDER_PRICE_CODE, updateOrderPrice.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_ORDER_CIRCULATION_TYPE, baseMqttEntity.getCode())) {                    // 远程订单流转                    BaseMqttEntity<OrderCirculationNoticeEntity> noticeEntity = BaseMqttEntity.fromJson(new String(data), OrderCirculationNoticeEntity.class);                    if (MyLifecycleHandler.isApplicationInForeground()) {                        Intent intent = new Intent();                        MainActivity.start(YmxApp.getInstance(), intent);                    }                    Intent intentNotice = new Intent();                    intentNotice.putExtra(OrderCirculationDialogActivity.NOTICE, noticeEntity.getData());                    OrderCirculationDialogActivity.start(YmxApp.getInstance(), intentNotice);                    if (!TextUtils.isEmpty(noticeEntity.getData().getVoiceTips())) {                        BaiduSpeech.getInstance(YmxApp.getInstance()).playText(noticeEntity.getData().getVoiceTips(), null);                    }                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_ORDER_CIRCULATION_FAILE_TYPE, baseMqttEntity.getCode())) {                    // 远程订单拒绝通知                    BaseMqttEntity<OrderCirculationInfo> noticeEntity = BaseMqttEntity.fromJson(new String(data), OrderCirculationInfo.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_ORDER_CIRCULATION_FAILE_NOTICE, noticeEntity.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_ORDER_CIRCULATION_SUCCESS_TYPE, baseMqttEntity.getCode())) {                    // 远程订单成功通知                    BaseMqttEntity<OrderCirculationInfo> noticeEntity = BaseMqttEntity.fromJson(new String(data), OrderCirculationInfo.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_ORDER_CIRCULATION_SUCCESS_NOTICE, noticeEntity.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_ORDER_CIRCULATION_QCODE_TYPE, baseMqttEntity.getCode())) {                    // 远程订单成功通知                    BaseMqttEntity<OrderCirculationEntity> noticeEntity = BaseMqttEntity.fromJson(new String(data), OrderCirculationEntity.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_ORDER_CIRCULATION_NOTICE_QCODE_CODE, noticeEntity.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_ORDER_CUSTOMER_TRIPS_TYPE, baseMqttEntity.getCode())) {                    //  乘客已确认/拒绝加价金额                    BaseMqttEntity<LongRangCustomerPremiumStatus> longRangCustomerPremiumStatus = BaseMqttEntity.fromJson(new String(data), LongRangCustomerPremiumStatus.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_ORDER_LONG_RANGE_CUSTOMER_TRIPS_CODE, longRangCustomerPremiumStatus.getData()));                    if (!TextUtils.isEmpty(longRangCustomerPremiumStatus.getData().getMsg())) {                        BaiduSpeech.getInstance(YmxApp.getInstance()).playText(longRangCustomerPremiumStatus.getData().getMsg(), null);                    }                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_CHARTTER_NEW_ORDER_TYPE, baseMqttEntity.getCode())) {                    //  包车新订单                    BaseMqttEntity<PassengerInfoEntity> passerInfoEntity = BaseMqttEntity.fromJson(new String(data), PassengerInfoEntity.class);                    if (!NewOrderFilterUtiles.hasOrder(passerInfoEntity.getData().getOrderNo())) {                        return;                    }                    if (!MyLifecycleHandler.isApplicationInForeground()) {                        Intent intent = new Intent();                        MainActivity.start(YmxApp.getInstance(), intent);                    }                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_GOTO_CHARTTER_NEW_ORDER_CODE, passerInfoEntity.getData()));                    BaiduSpeech.getInstance(YmxApp.getInstance()).playText("系统已为您匹配乘客，正在进入行程", null);                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_CHARTTER_CANCAL_ORDER_TYPE, baseMqttEntity.getCode())) {                    //  包车取消订单                    BaseMqttEntity<CharterCancalOrder> sysCancalOrder = BaseMqttEntity.fromJson(new String(data), CharterCancalOrder.class);                    if (sysCancalOrder.getData().isIntegralCompensate()) {                        VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.driver_jifen);                    }                    YmxCache.setOrderId("");                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_GOTO_CHARTTER_CANCAL_ORDER_CODE, sysCancalOrder.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_CHARTTER_FEE_ORDER_TYPE, baseMqttEntity.getCode())) {                    BaseMqttEntity<CharterOrderDetailsEntity> timeOutFee = BaseMqttEntity.fromJson(new String(data), CharterOrderDetailsEntity.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_CHARTTER_ORDER_TIME_OUT_FEE_CODE, timeOutFee.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_DRIVER_LOCK_TYPE, baseMqttEntity.getCode())) {                    BaseMqttEntity<DriverLockEntity> driverLockEntity = BaseMqttEntity.fromJson(new String(data), DriverLockEntity.class);                    DriverLockEntity driverLock = driverLockEntity.getData();                    if (driverLock.getLockType() == 1) {                        LoginHelper.logout();                        UIUtils.showToast(driverLock.getLockTips());                    } else if (driverLock.getLockType() == 2) {                        EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_DRIVER_LOCK_CODE, driverLock));                    }                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_CHARTTER_ORDER__UPDATE_TYPE, baseMqttEntity.getCode())) {                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_CHARTTER_ORDER_STATUS_UPDATE_CODE));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_TRANSFER_ORDER_SUCCESS, baseMqttEntity.getCode())) {                    BaseMqttEntity<String> info = BaseMqttEntity.fromJson(new String(data), String.class);                    if (MyLifecycleHandler.isApplicationInForeground()) {                        Intent intent = new Intent();                        MainActivity.start(YmxApp.getInstance(), intent);                    }                    YmxCache.setOrderId("");                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_TRANSFER_ORDER_SUCCESS_CODE, info.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_TRANSFER_ORDER_CANCAL_TYPE, baseMqttEntity.getCode())) {                    //接送站取消订单                    BaseMqttEntity<TransferOrderCancalEntity> transferCancalOrder = BaseMqttEntity.fromJson(new String(data), TransferOrderCancalEntity.class);                    if (transferCancalOrder.getData().isIntegralCompensate()) {                        VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.driver_jifen);                    }                    if (transferCancalOrder.getData().getDriverState() == 8) {                        YmxCache.setOrderId("");                    }                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_TRANSFER_ORDER_CANCAL_CODE, transferCancalOrder.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_TRANSFER_ORDER_TIME_INVALID_TYPE, baseMqttEntity.getCode())) {                    //接送站时间失效                    BaseMqttEntity<String> info = BaseMqttEntity.fromJson(new String(data), String.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_GO_TO_TRANSFER_TIME_INVALID_CODE, info.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_TRANSFER_ORDER_UPDATE_TIME_TYPE, baseMqttEntity.getCode())) {                    //接送站乘客同意司机修改接驾时间，通知司机                    BaseMqttEntity<TransferOrderUpdateTime> info = BaseMqttEntity.fromJson(new String(data), TransferOrderUpdateTime.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_MINE_TRANSFER_ORDER_UPDATE_TIME_CODE, info.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_TRANSFER_ORDER_UPDATE_TIME_TYPE, baseMqttEntity.getCode())) {                    //接送站乘客同意司机修改接驾时间，通知司机                    BaseMqttEntity<TransferOrderUpdateTime> info = BaseMqttEntity.fromJson(new String(data), TransferOrderUpdateTime.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_MINE_TRANSFER_ORDER_UPDATE_TIME_CODE, info.getData()));                } else if (TextUtils.equals(MqttConfig.MQTT_CODE_ORDER_UPDATE_ADDRESS_TYPE, baseMqttEntity.getCode())) {                    BaseMqttEntity<UpdateStartAddressEntity> info = BaseMqttEntity.fromJson(new String(data), UpdateStartAddressEntity.class);                    EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_MINE_ORDER_UPDATE_ADDRESSS_TYPE_CODE, info.getData()));                } else {                    MqttConfigFactory mqttConfigFactory = MqttConfigFactoryMap.getParserFactory(baseMqttEntity.getCode());                    if (mqttConfigFactory == null) {                        return;                    }                    SendMessage sendMessage = mqttConfigFactory.createMessage();                    sendMessage.sendMessage(new String(data));                }            }            @Override            public void deliveryComplete(IMqttDeliveryToken token) {                LogUtil.i(TAG, "Mqtt deliveryComplete()");            }        });    }    private void doConnect() throws Exception {        LogUtil.i(TAG, "mConfig.url " + url + "     " + isConnecting() + "   " + mClient);        LogUtil.i(TAG, "mConfig.mClientId " + mClientId);        LogUtil.i(TAG, "username " + createOfficialOptions().getUserName());        LogUtil.i(TAG, "password " + String.valueOf(createOfficialOptions().getPassword()));        if (mClient != null && !isConnecting()) {            LogUtil.i(TAG, "mqtt connecting");            mClient.connect(createOfficialOptions(), null, new IMqttActionListener() {                @Override                public void onSuccess(IMqttToken asyncActionToken) {                    LogUtil.i(TAG, "mqtt connect onSuccess");                    DisconnectedBufferOptions disconnectedBufferOptions = new DisconnectedBufferOptions();                    disconnectedBufferOptions.setBufferEnabled(true);                    disconnectedBufferOptions.setBufferSize(100);                    disconnectedBufferOptions.setPersistBuffer(false);                    disconnectedBufferOptions.setDeleteOldestMessages(false);                    if (mClient != null) {                        mClient.setBufferOpts(disconnectedBufferOptions);                    }                }                @Override                public void onFailure(IMqttToken asyncActionToken, Throwable exception) {                    LogUtil.i(TAG, "mqtt connect onFailure");                }            });        }    }    public static void publish(byte[] bytes, String topic) {        if (bytes == null || bytes.length == 0 || TextUtils.isEmpty(topic)) {            return;        }        if (mClient == null || !isConnecting()) {            return;        }        Log.i(TAG, "publish: topic:" + topic + "bytes:" + bytes.toString());        byte[] data = Base64.encode(bytes, Base64.NO_WRAP);        Log.i(TAG, "publish: topic:" + topic + "data:" + data);        try {            mClient.publish(topic, data, qos, false, null, null);        } catch (Exception e) {        }    }    public static void subscribeCodinMessageChannel(final String topic) {        if (!mTopics.contains(topic)) {            mTopics.add(topic);        }        try {            if (mClient == null) {                return;            }            mClient.subscribe(new String[]{topic}, new int[]{qos}, null, new IMqttActionListener() {                @Override                public void onSuccess(IMqttToken asyncActionToken) {                    LogUtil.i(TAG, "订阅频道成功 success : ---" + topic);                }                @Override                public void onFailure(IMqttToken asyncActionToken, Throwable exception) {                    LogUtil.i(TAG, "订阅频道失败 onFailure---" + topic);                }            });        } catch (Exception e) {            LogUtil.i(TAG, "订阅频道subscribeCodinMessageChannel error---" + topic + "  " + e.getMessage());        }    }    public static void unSubscribeCodinMessageChannel(final String topic) {        try {            if (mClient == null) {                return;            }            mClient.unsubscribe(new String[]{topic}, null, new IMqttActionListener() {                @Override                public void onSuccess(IMqttToken asyncActionToken) {                    LogUtil.i(TAG, "反注册通道success" + topic);                }                @Override                public void onFailure(IMqttToken asyncActionToken, Throwable exception) {                    LogUtil.i(TAG, "反注册通道失败");                }            });        } catch (Exception e) {            LogUtil.i(TAG, "订阅频道subscribeCodinMessageChannel error---" + topic + "  " + e.getMessage());        }    }    public static void unSubscribeCodinMessageChannel(final String topic, boolean delete) {        if (delete) {            mTopics.remove(topic);        }        try {            if (mClient == null) {                return;            }            mClient.unsubscribe(new String[]{topic}, null, new IMqttActionListener() {                @Override                public void onSuccess(IMqttToken asyncActionToken) {                    LogUtil.i(TAG, "反注册通道success" + topic);                }                @Override                public void onFailure(IMqttToken asyncActionToken, Throwable exception) {                    LogUtil.i(TAG, "反注册通道失败");                }            });        } catch (Exception e) {            LogUtil.i(TAG, "订阅频道subscribeCodinMessageChannel error---" + topic + "  " + e.getMessage());        }    }    public void rideHailingDrivingOrder(String orderNo, String MqttCode, PassengerInfoEntity passengerInfoEntity) {        RetrofitFactory.sApiService.recoverOrderDetails(orderNo)                .map(new TFunc<>())                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new TObserver<PassengerInfoEntity>() {                    @Override                    protected void onRequestStart() {                    }                    @Override                    protected void onRequestEnd() {                    }                    @Override                    protected void onSuccees(PassengerInfoEntity orderDetailsEntity) {                        if (!MyLifecycleHandler.isApplicationInForeground()) {                            Intent intent = new Intent();                            MainActivity.start(YmxApp.getInstance(), intent);                        }                        switch (MqttCode) {                            case MqttConfig.MQTT_CODE_PASSENGER_ORDER:                                EventBus.getDefault().post(new MessageEvent(MessageEvent.MSG_PASSENGER_ORDER, passengerInfoEntity));                                VoicePlayMannager.getInstance(getApplicationContext()).play(R.raw.auto_receive_order);                                break;                        }                    }                    @Override                    protected void onFailure(String message) {                    }                });    }}